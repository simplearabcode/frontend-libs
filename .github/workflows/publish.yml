name: Publish Package

on:
  # Trigger after CI workflow completes successfully
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  # Allow version tags
  push:
    tags:
      - 'v*'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional)'
        required: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ============================================
  # Publish to GitHub Packages
  # ============================================
  publish-npm:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts from CI
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: build-artifacts
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@simplearabcode'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules
          key: node-modules-${{ github.event.workflow_run.head_sha }}

      - name: Install dependencies (only if cache miss)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Check if version already published
        id: check_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version exists (will fail if not published yet)
          if npm view @simplearabcode/frontend-libs@$PACKAGE_VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION already published"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION not published yet"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Publish to GitHub Packages
        if: steps.check_version.outputs.exists != 'true'
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_version.outputs.exists != 'true' && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Package Published
            
            **Version**: ${{ steps.check_version.outputs.version }}
            **Package**: @simplearabcode/frontend-libs
            
            ### Installation
            ```bash
            pnpm add @simplearabcode/frontend-libs@${{ steps.check_version.outputs.version }}
            ```
            
            ### What's Changed
            See commit history for details.
          draft: false
          prerelease: false

  # ============================================
  # Build and Push Docker Image
  # ============================================
  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    needs: [publish-npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts from CI
        if: github.event_name == 'workflow_run'
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: build-artifacts
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/simplearabcode/frontend-libs
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image published
        run: |
          echo "Docker image published to:"
          echo "ghcr.io/simplearabcode/frontend-libs:latest"
          echo "ghcr.io/simplearabcode/frontend-libs:${{ steps.version.outputs.version }}"
